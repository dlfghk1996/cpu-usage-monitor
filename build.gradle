plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.5'
	id 'io.spring.dependency-management' version '1.1.4'
}

group = 'io.terra'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	// Spring Util
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

	// DataBase
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
	implementation 'mysql:mysql-connector-java:5.1.6'


	// 1. QuerydslRepositorySupport 등의 QueryDSL 내부클래스 사용을 위한 라이브러리
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'

	// 2. QClass 를 생성하기 위한 라이브러리 (Querydsl JPAAnnotationProcessor 사용 지정)
	annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"

	// java.lang.NoClassDefFoundError(javax.annotation.Entity) 발생 대응
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"
	// java.lang.NoClassDefFoundError(javax.annotation.Generated) 발생 대응
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"



	// spring doc open api
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'

	// ETC
	implementation 'org.modelmapper:modelmapper:2.4.2'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// TEST
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
}

// Qclass 생성 경로
def queryDslDir= "src/main/generated"

// build시 사용할 sourceSet 추가 설정 (src/main/java 디렉터리 외의 파일 빌드 target)
sourceSets {
	main.java.srcDirs += [queryDslDir]
}

// 컴파일 옵션
tasks.withType(JavaCompile) {
	options.getGeneratedSourceOutputDirectory().set(file(queryDslDir))
}

clean.doLast {
	file(queryDslDir).deleteDir()
}